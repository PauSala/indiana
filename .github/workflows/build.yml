name: Build and Release

on:
  workflow_dispatch: # Allows manual triggering of the workflow

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install mingw

      - name: Install dependencies (Debian)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y mingw-w64

      - name: Install cargo-deb (Debian)
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cargo-deb

      - name: Build for target
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            cargo deb --no-build --no-strip --no-check
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            cargo build --release
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            cargo build --release --target x86_64-pc-windows-gnu
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-${{ matrix.os }}
          path: |
            target/release/mole*
            target/x86_64-pc-windows-gnu/release/mole.exe
            target/debian/*.deb

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-ubuntu-latest
          path: build/ubuntu
      - uses: actions/download-artifact@v4
        with:
          name: build-macos-latest
          path: build/macos
      - uses: actions/download-artifact@v4
        with:
          name: build-windows-latest
          path: build/windows

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0 # You can dynamically set this based on your versioning strategy
          release_name: Release v1.0.0
          draft: false
          prerelease: false

      - name: Upload Debian Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/ubuntu/target/debian/*.deb
          asset_name: mole.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload macOS Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/macos/target/release/mole
          asset_name: mole-macos
          asset_content_type: application/octet-stream

      - name: Upload Windows Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/windows/target/x86_64-pc-windows-gnu/release/mole.exe
          asset_name: mole.exe
          asset_content_type: application/octet-stream
